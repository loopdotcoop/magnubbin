// Generated by CoffeeScript 1.9.2

/*! Magnubbin 0.0.10 //// MIT Licence //// http://magnubbin.loop.coop/ */

(function() {
  var Main, Ookonsole, Tudor, injectCSS, injectHTML, onPresetClick, tudor, ª, ªA, ªB, ªC, ªE, ªF, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªex, ªhas, ªredefine, ªtype, ªuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ªC = 'Magnubbin';

  ªV = '0.0.10';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = this;

  ª = console.log.bind(console);

  ªex = function(x, a, b) {
    var pos;
    if (-1 === (pos = a.indexOf(x))) {
      return x;
    } else {
      return b.charAt(pos);
    }
  };

  ªhas = function(h, n, t, f) {
    if (t == null) {
      t = true;
    }
    if (f == null) {
      f = false;
    }
    if (-1 !== h.indexOf(n)) {
      return t;
    } else {
      return f;
    }
  };

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªuid = function(p) {
    return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
  };

  ªredefine = function(obj, name, value, kind) {
    switch (kind) {
      case 'constant':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: true
        });
      case 'private':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: false
        });
    }
  };

  Main = (function() {
    Main.prototype.C = ªC;

    Main.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Main(config) {
      var error, k, v;
      if (config == null) {
        config = {};
      }
      for (k in config) {
        v = config[k];
        this[k] = v;
      }
      this.ookonsole = null;
      this.oo3d = null;
      this.$$presets = null;
      this.focusIndex = void 0;
      if (this.$cssTarget) {
        injectCSS(this.$cssTarget, "Injected by " + ªC + " " + ªV);
      }
      if (this.$htmlTarget) {
        injectHTML(this.$htmlTarget, "Injected by " + ªC + " " + ªV);
      }
      this.initPresets();
      try {
        this.ookonsole = new Ookonsole({
          $display: $('#ookonsole-display'),
          $command: $('#ookonsole-command'),
          context: this
        });
        this.initTasks();
        this.ookonsole.show();
        this.ookonsole.start();
      } catch (_error) {
        error = _error;
        $('#magnubbin-error').innerHTML = error;
        $('#magnubbin-error').className = '';
        return;
      }
      try {
        this.$main = $('#oo3d-main');
        this.oo3d = new Oo3d({
          $main: this.$main,
          bkgnd: new Float32Array([0.03, 0.1, 0.05, 1.0])
        });
        this.pyramidPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.0, 1.0, 0.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 0.0, 1.0, 0.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 1.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0]
        });
        this.pyramidColorI = this.oo3d.add('Buffer.Color', {
          data: [0.3, 0.0, 0.0, 0.95, 0.3, 0.0, 0.0, 0.95, 0.3, 0.0, 0.0, 0.95, 0.0, 0.25, 0.0, 0.75, 0.0, 0.25, 0.0, 0.75, 0.0, 0.25, 0.0, 0.75, 1.0, 0.25, 0.0, 0.10, 1.0, 0.25, 0.0, 0.10, 1.0, 0.25, 0.0, 0.10, 0.25, 0.5, 1.0, 0.05, 0.25, 0.5, 1.0, 0.05, 0.25, 0.5, 1.0, 0.05]
        });
        this.cameraI = this.oo3d.add('Item.Camera', {
          fovy: 0.785398163,
          aspect: this.$main.width / this.$main.height
        });
        this.flatItemProgramI = this.oo3d.add('Program.Flat', {
          subclass: 'Flat'
        });
        this.rendererI = this.oo3d.add('Renderer.Wireframe', {
          cameraI: this.cameraI,
          programI: this.flatItemProgramI,
          meshIs: []
        });
        this.layerI = this.oo3d.add('Layer.Simple', {
          rendererIs: [this.rendererI],
          scissor: [0, 0, 1, 1]
        });
        this.oo3d.render();
      } catch (_error) {
        error = _error;
        $('#magnubbin-error').innerHTML = error;
        $('#magnubbin-error').className = '';
        return;
      }
    }

    Main.prototype.initTasks = function() {
      this.ookonsole.addTask('add', {
        summary: "Add a new magnubbin to the scene",
        completions: ['add ocrex', 'add slyce', 'add betr'],
        details: "add\n---\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var index, oo3d;
          oo3d = context.oo3d;
          switch (options[0]) {
            case 'ocrex':
              index = oo3d.add('Item.Mesh', {
                positionI: context.pyramidPositionI,
                colorI: context.pyramidColorI
              });
              oo3d._all[context.rendererI].meshes.push(oo3d._all[index]);
              context.changeFocus(index);
              oo3d.render();
              $('.magnubbin-focus-presets').innerHTML += "<li id=\"magnubbin-focus-preset-" + index + "\" \ndata-command=\"focus " + index + "\">Ocrex#" + index + "</li>";
              context.initPresets();
              return "Added ocrex. Focused on index " + index;
            default:
              return "'" + options[0] + "' not recognised";
          }
        }
      });
      this.ookonsole.addTask('focus', {
        summary: "Focus on one of the magnubbins",
        completions: ['focus '],
        details: "focus\n-----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var index, ref;
          index = options[0];
          if (!/^\d+$/.test(index)) {
            return "'" + index + "' is not a valid index - must be an integer";
          } else if ('Item.Mesh' !== ((ref = context.oo3d._all[+index]) != null ? ref.C : void 0)) {
            return "'" + index + "' is not the index of an Item.Mesh";
          } else {
            context.changeFocus(+index);
            context.oo3d.render();
            return "Focused on index '" + index + "'";
          }
        }
      });
      this.ookonsole.addTask('blur', {
        summary: "Focus on the camera",
        completions: ['blur'],
        details: "blur\n-----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          context.changeFocus();
          context.oo3d.render();
          return "Focused on the camera";
        }
      });
      return this.ookonsole.addTask('edit', {
        summary: "Edit the focused Item.Mesh, or the camera",
        completions: ['edit '],
        details: "edit\n----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var delta, i, l, option, set, value;
          set = {};
          delta = {};
          i = 0;
          l = options.length;
          while (i < l) {
            option = options[i++];
            value = +options[i++];
            if (!/^d?[rst][xyz]$/.test(option)) {
              return "`options[" + (i - 2) + "]` is invalid, use 'dtx', 'sz', etc";
            }
            if (isNaN(value)) {
              return "`options[" + (i - 1) + "]` is invalid, must be numeric";
            }
            if ('d' !== option.charAt(0)) {
              set[option[0] + option[1].toUpperCase()] = value;
            } else {
              delta[option[1] + option[2].toUpperCase()] = value;
            }
          }
          if (ªN === ªtype(context.focusIndex)) {
            context.oo3d.edit(context.focusIndex, set, delta);
            context.oo3d.render();
            return "Edited index '" + context.focusIndex + "'";
          } else {
            context.oo3d.edit(context.cameraI, set, delta);
            context.oo3d._all[context.cameraI].updateCamera();
            context.oo3d.render();
            return "Edited the camera";
          }
        }
      });
    };

    Main.prototype.initPresets = function() {
      var $preset, j, len, ref, results;
      this.$$presets = $$('.magnubbin-presets >li');
      ref = this.$$presets;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        $preset = ref[j];
        $preset.removeEventListener('click', onPresetClick);
        results.push($preset.addEventListener('click', onPresetClick));
      }
      return results;
    };

    Main.prototype.changeFocus = function(focusIndex) {
      var instance, j, len, ref;
      this.focusIndex = focusIndex;
      ref = this.oo3d._all;
      for (j = 0, len = ref.length; j < len; j++) {
        instance = ref[j];
        if ('Item.Mesh' === instance.C) {
          this.oo3d.setRenderMode('TRIANGLES', instance.index);
        }
      }
      if (ªN === typeof focusIndex) {
        return this.oo3d.setRenderMode('LINE_LOOP', focusIndex);
      }
    };

    return Main;

  })();

  injectCSS = function($cssTarget, title) {
    return $cssTarget.innerHTML = "/* `@import` must go first */\n@import url(http://fonts.googleapis.com/css?family=Podkova);\n\n" + $cssTarget.innerHTML + "\n\n/* " + title + " */\n\n\n/* MAIN SECTIONS */\n.magnubbin-main {\n  color: #acb;\n}\n.magnubbin-main >* {\n  position: absolute;\n  box-sizing: border-box;\n  top:    0;\n  bottom: 0;\n  padding: 1rem;\n}\n.magnubbin-view {\n  left:   0;\n  right:  0;\n  background: transparent; /* was rgba(30,50,40,0.7) */\n}\n.magnubbin-control {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  right:  0;\n  width:  25%;\n  height: 100%;\n  min-width: 35rem; /* usual maximum ookonsole-display lines */\n  background: rgba(30,30,30,0.7);\n}\n.magnubbin-control >* {\n  flex-basis: 0%; /* log is '100%', so expands to fill */\n}\n.magnubbin-control h4 { /* @todo remove if not used */\n  margin: 0;\n  padding: 0.3em 0;\n}\n.magnubbin-control ul,\n.magnubbin-control pre {\n  margin-top: 0.5em;\n}\n.magnubbin-main a {\n  color: #eee;\n  text-decoration: none;\n  transition: all 0.5s;\n}\n.magnubbin-main a:hover {\n  color: #0f3;\n}\n\n\n/* 3D CONTEXT */\n#oo3d-main {\n  position: absolute;\n  top:     0;\n  left:    0;\n  width:   100%;\n  height:  100%;\n  z-index: -1;\n}\n\n\n/* INFO PANEL */\n.magnubbin-preexisting {\n  left:   -76%;\n  width:  75%;\n  background: rgba(10,10,10,0);\n  transition: all 1s;\n}\n.magnubbin-preexisting.active {\n  left:   0;\n  background: rgba(10,10,10,1);\n}\n\n\n/* TOGGLE */\n.magnubbin-toggle-preexisting {\n  display: block;\n  height: 3em;\n  margin: 0 0 0.3em 0;\n}\n.magnubbin-icon-info {\n  display: block;\n  float: left;\n  margin: -0.2em 0 0.2em 0;\n  padding: 0;\n  width:      1em;\n  height:     1em;\n  max-width:  1em;\n  max-height: 1em;\n  border: 2px solid; /* same as text color */\n  border-radius: 2em;\n  font: bold italic 2em serif;\n}\n.magnubbin-icon-info:before {\n  content: \"i\";\n  display: inline-block;\n  margin-left: 0.35em;\n}\n.magnubbin-logo {\n  font: bold 1.5em Podkova;\n}\n.magnubbin-control .magnubbin-logo {\n  float: right;\n}\n\n\n/* PRESETS */\nul.magnubbin-presets {\n  clear: both;\n  margin: 0 0 0.2em 0;\n  padding: 0;\n}\n.magnubbin-presets >li {\n  display: inline-block;\n  padding: 0.5em 0.8em;\n  margin: 0 0.2em 0.5em 0;\n  list-style-type: none;\n  border: 2px solid;\n  border-radius: 0.2em;\n  color: #eee;\n  cursor: pointer;\n  transition: all 0.5s;\n}\n.magnubbin-presets >li:hover {\n  color: #0f3;\n}\n\n\n/* DISPLAY AND COMMAND */\n.magnubbin-control #ookonsole-display {\n  flex-basis: 100%; /* override 1px */\n  margin: 0;\n  padding: 0.75em 0.8em;\n  border: 2px solid;\n  border-radius: 0.4em 0.4em 0 0;\n  font: 0.75rem \"monaco\", monospace;\n}\n#ookonsole-command {\n  display: block;\n  box-sizing: border-box;\n  padding: 0.5em;\n  width: 100%;\n  border: 2px solid #acb;\n  border-radius: 0 0 0.4em 0.4em;\n  font: 1em \"monaco\", monospace;\n  color: #eee;\n  background: transparent;\n}\n\n\n/* ERROR */\n#magnubbin-error {\n  position: absolute;\n  box-sizing: border-box;\n  bottom:  0;\n  left:    5%;\n  width:  90%;\n  padding: 1rem;\n  font-family: monaco, monospace;\n  background-color: #933;\n  color: #fff;\n  transition: all 0.5s;\n  opacity: 1;\n}\n#magnubbin-error.hidden {\n  padding-bottom: 0;\n  opacity: 0;\n}\n";
  };

  injectHTML = function($htmlTarget, title) {
    $htmlTarget.className += ' magnubbin-wrap';
    $htmlTarget.innerHTML = "\n\n\n<!-- " + title + " -->\n\n<!-- The main Magnubbin elements -->\n<main class=\"magnubbin-main\">\n  <section class=\"magnubbin-view\">\n    <canvas id=\"oo3d-main\" width=\"600\" height=\"450\"></canvas><!-- @todo resize with window -->\n    <a href=\"http://loop.coop/\" title=\"Created by Loop.Coop\" class=\"magnubbin-logo\">Loop.Coop</a>\n    <div id=\"magnubbin-error\" class=\"hidden\"></div>\n  </section>\n  <section class=\"magnubbin-control\">\n    <a href=\"#/\" title=\"Toggle info\" class=\"magnubbin-toggle-preexisting\">\n      <span class=\"magnubbin-icon-info\"></span>\n      <span class=\"magnubbin-logo\">Magnubbin</span>\n    </a>\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"clear\">Clear</li>\n      <li data-command=\"add ocrex\">Add Ocrex</li>\n    </ul>\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"edit drx -20\">rx-</li>\n      <li data-command=\"edit drx 20\" >rx+</li>\n      <li data-command=\"edit dry -20\">ry-</li>\n      <li data-command=\"edit dry 20\" >ry+</li>\n      <li data-command=\"edit drz -20\">rz-</li>\n      <li data-command=\"edit drz 20\" >rz+</li>\n    </ul>\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"edit dsx 2.0 dsy 2.0 dsz 2.0\">&times;2</li>\n      <li data-command=\"edit dsx 0.5 dsy 0.5 dsz 0.5\" >&divide2</li>\n      <li data-command=\"edit dsx -1\">fx</li>\n      <li data-command=\"edit dsy -1\">fy</li>\n      <li data-command=\"edit dsz -1\">fz</li>\n    </ul>\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"edit dtx -0.2\">x-</li>\n      <li data-command=\"edit dtx 0.2\" >x+</li>\n      <li data-command=\"edit dty -0.2\">y-</li>\n      <li data-command=\"edit dty 0.2\" >y+</li>\n      <li data-command=\"edit dtz -0.2\">z-</li>\n      <li data-command=\"edit dtz 0.2\" >z+</li>\n    </ul>\n    <ul class=\"magnubbin-presets magnubbin-focus-presets\">\n      <li data-command=\"blur\">Focus Camera</li>\n    </ul>\n    <pre id=\"ookonsole-display\"></pre>\n    <div><input id=\"ookonsole-command\"></div>\n  </section>\n  <section class=\"magnubbin-preexisting\">\n    " + $htmlTarget.innerHTML + "\n  </section>\n</main>\n";
    return $('.magnubbin-toggle-preexisting').addEventListener('click', function() {
      var $preexisting;
      $preexisting = $('.magnubbin-preexisting');
      if (/active/.test($preexisting.className)) {
        return $preexisting.className = 'magnubbin-preexisting';
      } else {
        return $preexisting.className = 'magnubbin-preexisting active';
      }
    });
  };

  onPresetClick = function(event) {
    var error;
    try {
      return window.magnubbin.ookonsole.execute(event.target.getAttribute('data-command'));
    } catch (_error) {
      error = _error;
      $('#magnubbin-error').innerHTML = error;
      return $('#magnubbin-error').className = '';
    }
  };

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªC] = Main;
  }

  if (ªF === typeof define && define.amd) {

  } else if (ªO === typeof module && module && module.exports) {
    Ookonsole = require('ookonsole');
  } else if (this.Ookonsole) {
    Ookonsole = this.Ookonsole;
  } else {
    Ookonsole = window.Ookonsole;
  }

  if ((ªU !== typeof arts) && (ªU !== typeof resolvers) && (ªU !== typeof updaters)) {
    window.magnubbin = new Main({
      $cssTarget: $('style'),
      $htmlTarget: $('article')
    });
  }

  Tudor = (function() {
    Tudor.prototype.I = 'Tudor';

    Tudor.prototype.toString = function() {
      return "[object " + I + "]";
    };

    Tudor.prototype.articles = [];

    function Tudor(opt) {
      this.opt = opt != null ? opt : {};
      this["do"] = bind(this["do"], this);
      switch (this.opt.format) {
        case 'html':
          this.pageHead = function(summary) {
            return "<style>\n  body     { font-family: sans-serif; }\n  a        { outline: 0; }\n  b        { display: inline-block; width: .7em }\n\n  b.pass              { color: #393 }\n  b.fail              { color: #bbb }\n  article.fail b.pass { color: #bbb }\n  section.fail b.pass { color: #bbb }\n\n  pre      { padding: .5em; margin: .2em 0; border-radius: 4px; }\n  pre.fn   { background-color: #fde }\n  pre.pass { background-color: #cfc }\n  pre.fail { background-color: #d8e0e8 }\n\n  article  { margin-bottom: .5rem }\n  article h2 { padding-left:.5rem; margin:0; font-weight:normal }\n  article.pass { border-left: 5px solid #9c9 }\n  article.fail { border-left: 5px solid #9bf }\n  article.fail h2 { margin-bottom: .5rem }\n  article.pass >div { display: none }\n\n  section  { margin-bottom: .5rem }\n  section h3   { padding-left: .5rem; margin: 0; }\n  section.pass { border-left: 3px solid #9c9 }\n  section.fail { border-left: 3px solid #9bf }\n  section.fail h3 { margin-bottom: .5rem }\n  section.pass >div { display: none }\n\n  article.fail section.pass { border-left-color: #ccc }\n\n  div      { padding-left: .5em; }\n  div.fail { border-left: 3px solid #9bf; font-size: .8rem }\n  div h4   { margin: 0 }\n  div h4 { font: normal .8rem/1.2rem monaco, monospace }\n  div.fail, div.fail h4 { margin: .5rem 0 }\n\n</style>\n<h4><a href=\"#end\" id=\"top\">\u2b07</a>  " + summary + "</h4>";
          };
          this.pageFoot = function(summary) {
            return "<h4><a href=\"#top\" id=\"end\">\u2b06</a>  " + summary + "</h4>\n<script>\n  document.title='" + (summary.replace(/<\/?[^>]+>/g, '')) + "';\n</script>";
          };
          this.articleHead = function(heading, fail) {
            return ("<article class=\"" + (fail ? 'fail' : 'pass') + "\">") + ("<h2>" + (fail ? this.cross : this.tick) + heading + "</h2><div>");
          };
          this.articleFoot = '</div></article>';
          this.sectionHead = function(heading, fail) {
            return ("<section class=\"" + (fail ? 'fail' : 'pass') + "\">") + ("<h3>" + (fail ? this.cross : this.tick) + heading + "</h3><div>");
          };
          this.sectionFoot = '</div></section>';
          this.jobFormat = function(heading, result) {
            return ("<div class=\"" + (result ? 'fail' : 'pass') + "\">") + ("<h4>" + (result ? this.cross : this.tick) + heading + "</h4>") + ("" + (result ? this.formatError(result) : '')) + "</div>";
          };
          this.tick = '<b class="pass">\u2713</b> ';
          this.cross = '<b class="fail">\u2718</b> ';
          break;
        default:
          this.pageHead = function(summary) {
            return "" + summary;
          };
          this.pageFoot = function(summary) {
            return "\n" + summary;
          };
          this.articleHead = function(heading, fail) {
            return "\n" + (fail ? this.cross : this.tick) + " " + heading + "\n===" + (new Array(heading.length).join('=')) + "\n";
          };
          this.articleFoot = '';
          this.sectionHead = function(heading, fail) {
            return "\n" + (fail ? this.cross : this.tick) + " " + heading + "\n---" + (new Array(heading.length).join('-')) + "\n";
          };
          this.sectionFoot = '';
          this.jobFormat = function(heading, result) {
            return ((result ? this.cross : this.tick) + " " + heading) + ("" + (result ? '\n' + this.formatError(result) : ''));
          };
          this.jobFoot = '';
          this.tick = '\u2713';
          this.cross = '\u2718';
      }
    }

    Tudor.prototype.add = function(lines) {
      var article, i, line, runner, section;
      article = {
        sections: []
      };
      runner = null;
      section = null;
      if (ªA !== ªtype(lines)) {
        throw new Error("`lines` isn’t an array");
      }
      if (0 === lines.length) {
        throw new Error("`lines` has no elements");
      }
      if (ªS !== ªtype(lines[0])) {
        throw new Error("`lines[0]` isn’t a string");
      }
      article.heading = lines.shift();
      i = 0;
      while (i < lines.length) {
        line = lines[i];
        switch (ªtype(line)) {
          case ªO:
            if (!line.runner) {
              throw new Error("Errant object");
            }
            runner = line.runner;
            break;
          case ªF:
            section.jobs.push(line);
            break;
          case ªS:
            if (this.isAssertion(lines[i + 1], lines[i + 2])) {
              if (!section) {
                throw new Error("Cannot add an assertion here");
              }
              section.jobs.push([runner, line, lines[++i], lines[++i]]);
            } else {
              section = {
                heading: line,
                jobs: []
              };
              article.sections.push(section);
            }
        }
        i++;
      }
      return this.articles.push(article);
    };

    Tudor.prototype["do"] = function() {
      var actual, art, artFail, artPass, article, e, error, expect, heading, j, job, len, len1, len2, m, mock, o, pge, pgeFail, pgePass, ref, ref1, ref2, result, runner, sec, secFail, secPass, section, summary;
      pge = [];
      mock = null;
      pgePass = pgeFail = 0;
      ref = this.articles;
      for (j = 0, len = ref.length; j < len; j++) {
        article = ref[j];
        art = [];
        artPass = artFail = 0;
        ref1 = article.sections;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          section = ref1[m];
          sec = [];
          secPass = secFail = 0;
          ref2 = section.jobs;
          for (o = 0, len2 = ref2.length; o < len2; o++) {
            job = ref2[o];
            switch (ªtype(job)) {
              case ªF:
                try {
                  mock = job.apply(this, mock);
                } catch (_error) {
                  e = _error;
                  error = e.message;
                }
                if (error) {
                  sec.push(this.formatMockModifierError(job, error));
                }
                break;
              case ªA:
                runner = job[0], heading = job[1], expect = job[2], actual = job[3];
                result = runner(expect, actual, mock);
                if (!result) {
                  sec.push(this.jobFormat("" + (this.sanitize(heading))));
                  pgePass++;
                  artPass++;
                  secPass++;
                } else {
                  sec.push(this.jobFormat("" + (this.sanitize(heading)), result));
                  pgeFail++;
                  artFail++;
                  secFail++;
                }
            }
          }
          sec.unshift(this.sectionHead("" + (this.sanitize(section.heading)), secFail));
          sec.push(this.sectionFoot);
          art = art.concat(sec);
        }
        art.unshift(this.articleHead("" + (this.sanitize(article.heading)), artFail));
        art.push(this.articleFoot);
        pge = pge.concat(art);
        summary = pgeFail ? this.cross + " FAILED " + pgeFail + "/" + (pgePass + pgeFail) : this.tick + " Passed " + pgePass + "/" + (pgePass + pgeFail);
      }
      pge.unshift(this.pageHead(summary));
      pge.push(this.pageFoot(summary));
      return pge.join('\n');
    };

    Tudor.prototype.formatError = function(result) {
      switch (result.length + "-" + this.opt.format) {
        case '2-html':
          return result[0] + "\n<pre class=\"fail\">" + (this.sanitize(result[1].message)) + "</pre>";
        case '2-plain':
          return result[0] + "\n" + (this.sanitize(result[1].message));
        case '3-html':
          return "<pre class=\"fail\">" + (this.sanitize(this.reveal(result[0]))) + "</pre>\n..." + result[1] + "...\n<pre class=\"pass\">" + (this.sanitize(this.reveal(result[2]))) + "</pre>";
        case '3-plain':
          return (this.sanitize(this.reveal(result[0]))) + "\n..." + result[1] + "...\n" + (this.sanitize(this.reveal(result[2])));
        case '4-html':
          return "<pre class=\"fail\">" + (this.sanitize(this.reveal(result[0]))) + " (" + (ªtype(result[0])) + ")</pre>\n..." + result[1] + "...\n<pre class=\"pass\">" + (this.sanitize(this.reveal(result[2]))) + " (" + (ªtype(result[2])) + ")</pre>";
        case '4-plain':
          return (this.sanitize(this.reveal(result[0]))) + " (" + (ªtype(result[0])) + ")\n..." + result[1] + "...\n" + (this.sanitize(this.reveal(result[2]))) + " (" + (ªtype(result[2])) + ")";
        default:
          throw new Error("Cannot process '" + result.length + "-" + this.opt.format + "'");
      }
    };

    Tudor.prototype.formatMockModifierError = function(fn, error) {
      switch (this.opt.format) {
        case 'html':
          return "<pre class=\"fn\">" + (this.sanitize(fn + '')) + "</pre>\n...encountered an exception:\n<pre class=\"fail\">" + (this.sanitize(error)) + "</pre>";
        default:
          return (this.sanitize(fn + '')) + "\n...encountered an exception:\n" + (this.sanitize(error));
      }
    };

    Tudor.prototype.reveal = function(value) {
      return value != null ? value.toString().replace(/^\s+|\s+$/g, function(match) {
        return '\u00b7' + (new Array(match.length)).join('\u00b7');
      }) : void 0;
    };

    Tudor.prototype.sanitize = function(value) {
      switch (this.opt.format) {
        case 'html':
          return value != null ? value.toString().replace(/</g, '&lt;') : void 0;
        default:
          return value;
      }
    };

    Tudor.prototype["throw"] = {
      runner: function(expect, actual, mock) {
        var e, error;
        error = false;
        try {
          actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (!error) {
          return [
            'No exception thrown, expected', {
              message: expect
            }
          ];
        } else if (expect !== error.message) {
          return [error.message, 'was thrown, but expected', expect];
        }
      }
    };

    Tudor.prototype.equal = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (expect !== result) {
          if (result + '' === expect + '') {
            return [result, 'was returned, but expected', expect, true];
          } else {
            return [result, 'was returned, but expected', expect];
          }
        }
      }
    };

    Tudor.prototype.is = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (expect !== ªtype(result)) {
          return ["type " + (ªtype(result)), 'was returned, but expected', "type " + expect];
        }
      }
    };

    Tudor.prototype.match = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (ªF !== typeof expect.test) {
          return [
            '`test()` is not a function', {
              message: expect
            }
          ];
        } else if (!expect.test('' + result)) {
          return ['' + result, 'failed test', expect];
        }
      }
    };

    Tudor.prototype.isAssertion = function(line1, line2) {
      if (ªF !== ªtype(line2)) {
        return false;
      }
      if ((ªO === ªtype(line1)) && ªF === ªtype(line1.runner)) {
        return false;
      }
      return true;
    };

    return Tudor;

  })();

  tudor = new Tudor({
    format: ªO === typeof window ? 'html' : 'plain'
  });

  Main.runTest = tudor["do"];

  tudor.add([
    "01 Magnubbin Constructor Usage", tudor.is, "The class and instance are expected types", "The class is a function", ªF, function() {
      return Main;
    }
  ]);

}).call(this);
