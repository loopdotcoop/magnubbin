// Generated by CoffeeScript 1.9.2

/*! Magnubbin 0.0.23 //// MIT Licence //// http://magnubbin.loop.coop/ */

(function() {
  var Main, Ookonsole, Tudor, afterInteraction, grid9IsActive, grid9OnlyShow, injectCSS, injectHTML, onMousedown, onMousemove, onMouseup, onPresetClick, onTouchend, onTouchmove, onTouchstart, parseQuery, rxyDelta, ryzDelta, scaleDelta, tudor, txyDelta, txzDelta, vpSize, ª, ªA, ªB, ªC, ªE, ªF, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªex, ªhas, ªredefine, ªtype, ªuid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ªC = 'Magnubbin';

  ªV = '0.0.23';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = this;

  ª = console.log.bind(console);

  ªex = function(x, a, b) {
    var pos;
    if (-1 === (pos = a.indexOf(x))) {
      return x;
    } else {
      return b.charAt(pos);
    }
  };

  ªhas = function(h, n, t, f) {
    if (t == null) {
      t = true;
    }
    if (f == null) {
      f = false;
    }
    if (-1 !== h.indexOf(n)) {
      return t;
    } else {
      return f;
    }
  };

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªuid = function(p) {
    return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
  };

  ªredefine = function(obj, name, value, kind) {
    switch (kind) {
      case 'constant':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: true
        });
      case 'private':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: false
        });
    }
  };

  Main = (function() {
    Main.prototype.C = ªC;

    Main.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Main(config) {
      var error, k, query, v;
      if (config == null) {
        config = {};
      }
      for (k in config) {
        v = config[k];
        this[k] = v;
      }
      this.ookonsole = null;
      this.oo3d = null;
      this.$$presets = null;
      this.focusI = void 0;
      this.downPos = null;
      this.deltaCalc = function(x, y) {
        return {};
      };
      this.snapshot = null;
      this.delta = null;
      if (this.$cssTarget) {
        injectCSS(this.$cssTarget, "Injected by " + ªC + " " + ªV);
      }
      if (this.$htmlTarget) {
        injectHTML(this.$htmlTarget, "Injected by " + ªC + " " + ªV);
      }
      try {
        this.ookonsole = new Ookonsole({
          $display: $('#ookonsole-display'),
          $command: $('#ookonsole-command'),
          context: this
        });
        this.initTasks();
        this.ookonsole.show();
        this.ookonsole.start();
      } catch (_error) {
        error = _error;
        $('#magnubbin-error').innerHTML = error;
        $('#magnubbin-error').className = '';
        return;
      }
      try {
        this.$main = $('#oo3d-main');
        this.oo3d = new Oo3d({
          $main: this.$main,
          bkgnd: new Float32Array([1, 1, 1, 1])
        });
        this.flatrPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.330, 1.732, -2.000, -0.330, -1.732, 2.000, -0.330, -1.732, 0.000, -0.330, 1.732, -2.000, -0.330, -1.732, 0.000, 0.660, 1.588, 0.000, -0.330, 1.732, 2.000, -0.330, -1.732, 0.000, 0.660, 1.588, -2.000, -0.330, -1.732, 2.000, -0.330, -1.732, 0.000, 0.660, 1.588]
        });
        this.betrPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.471, 2.135, -1.265, -0.471, -1.660, 1.581, -0.471, -2.609, 0.000, -0.471, 2.135, -1.265, -0.471, -1.660, -0.119, 0.942, 0.725, 0.000, -0.471, 2.135, 1.581, -0.471, -2.609, -0.119, 0.942, 0.725, -1.265, -0.471, -1.660, 1.581, -0.471, -2.609, -0.119, 0.942, 0.725]
        });
        this.ocrexPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.756, 2.291, -2.000, -0.756, -2.291, 2.000, -0.756, -2.291, 0.000, -0.756, 2.291, -2.000, -0.756, -2.291, 0.000, 1.512, 0.327, 0.000, -0.756, 2.291, 2.000, -0.756, -2.291, 0.000, 1.512, 0.327, -2.000, -0.756, -2.291, 2.000, -0.756, -2.291, 0.000, 1.512, 0.327]
        });
        this.icosPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.744, 2.291, -2.000, -0.744, -2.291, 2.000, -0.744, -2.291, 0.000, -0.744, 2.291, -2.000, -0.744, -2.291, 0.000, 1.489, -2.182, 0.000, -0.744, 2.291, 2.000, -0.744, -2.291, 0.000, 1.489, -2.182, -2.000, -0.744, -2.291, 2.000, -0.744, -2.291, 0.000, 1.489, -2.182]
        });
        this.decrPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.634, 3.083, -1.581, -0.634, -1.660, 2.530, -0.634, -4.506, 0.000, -0.634, 3.083, -1.581, -0.634, -1.660, 0.731, 1.269, -1.482, 0.000, -0.634, 3.083, 2.530, -0.634, -4.506, 0.731, 1.269, -1.482, -1.581, -0.634, -1.660, 2.530, -0.634, -4.506, 0.731, 1.269, -1.482]
        });
        this.sqishPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.485, 3.303, -1.984, -0.485, -2.359, 2.646, -0.485, -4.247, 0.000, -0.485, 3.303, -1.984, -0.485, -2.359, -0.220, 0.970, -0.417, 0.000, -0.485, 3.303, 2.646, -0.485, -4.247, -0.220, 0.970, -0.417, -1.984, -0.485, -2.359, 2.646, -0.485, -4.247, -0.220, 0.970, -0.417]
        });
        this.slysPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.678, 3.992, -0.500, -0.678, -3.992, 0.500, -0.678, -3.992, 0.000, -0.678, 3.992, -0.500, -0.678, -3.992, 0.000, 1.356, 0.548, 0.000, -0.678, 3.992, 0.500, -0.678, -3.992, 0.000, 1.356, 0.548, -0.500, -0.678, -3.992, 0.500, -0.678, -3.992, 0.000, 1.356, 0.548]
        });
        this.spykPositionI = this.oo3d.add('Buffer.Position', {
          data: [0.000, -0.288, 3.992, -0.500, -0.288, -3.992, 0.500, -0.288, -3.992, 0.000, -0.288, 3.992, -0.500, -0.288, -3.992, 0.000, 0.577, -3.961, 0.000, -0.288, 3.992, 0.500, -0.288, -3.992, 0.000, 0.577, -3.961, -0.500, -0.288, -3.992, 0.500, -0.288, -3.992, 0.000, 0.577, -3.961]
        });
        this.redColorI = this.oo3d.add('Buffer.Color', {
          data: [0.30, 0.02, 0.12, 0.95, 0.38, 0.04, 0.12, 0.95, 0.31, 0.01, 0.10, 0.95, 0.22, 0.02, 0.11, 0.95, 0.33, 0.01, 0.06, 0.95, 0.31, 0.00, 0.12, 0.95, 0.33, 0.00, 0.00, 0.95, 0.12, 0.08, 0.13, 0.95, 0.31, 0.01, 0.04, 0.95, 0.32, 0.00, 0.08, 0.95, 0.37, 0.01, 0.12, 0.95, 0.30, 0.05, 0.00, 0.95]
        });
        this.greenColorI = this.oo3d.add('Buffer.Color', {
          data: [0.02, 0.30, 0.12, 0.95, 0.04, 0.38, 0.12, 0.95, 0.01, 0.31, 0.10, 0.95, 0.02, 0.22, 0.11, 0.95, 0.01, 0.33, 0.06, 0.95, 0.00, 0.31, 0.12, 0.95, 0.00, 0.33, 0.00, 0.95, 0.08, 0.12, 0.13, 0.95, 0.01, 0.31, 0.04, 0.95, 0.00, 0.32, 0.08, 0.95, 0.01, 0.37, 0.12, 0.95, 0.05, 0.30, 0.00, 0.95]
        });
        this.blueColorI = this.oo3d.add('Buffer.Color', {
          data: [0.12, 0.02, 0.30, 0.95, 0.12, 0.04, 0.38, 0.95, 0.10, 0.01, 0.31, 0.95, 0.11, 0.02, 0.22, 0.95, 0.06, 0.01, 0.33, 0.95, 0.12, 0.00, 0.31, 0.95, 0.00, 0.00, 0.33, 0.95, 0.13, 0.08, 0.12, 0.95, 0.04, 0.01, 0.31, 0.95, 0.08, 0.00, 0.32, 0.95, 0.12, 0.01, 0.37, 0.95, 0.00, 0.05, 0.30, 0.95]
        });
        this.cameraI = this.oo3d.add('Item.Camera', {
          fovy: 0.785398163,
          aspect: this.$main.width / this.$main.height
        });
        this.flatItemProgramI = this.oo3d.add('Program.FlatItem');
        this.flatProgramI = this.oo3d.add('Program.Flat');
        this.rendererI = this.oo3d.add('Renderer.Wireframe', {
          cameraI: this.cameraI,
          programI: this.flatProgramI,
          meshIs: []
        });
        this.layerI = this.oo3d.add('Layer.Simple', {
          rendererIs: [this.rendererI],
          scissor: [0, 0, 1, 1]
        });
        this.oo3d.render();
      } catch (_error) {
        error = _error;
        $('#magnubbin-error').innerHTML = error;
        $('#magnubbin-error').className = '';
        return;
      }
      query = parseQuery(window.location.search.slice(1));
      if (query.scene_v1) {
        this.ookonsole.execute('restore ' + query.scene_v1);
      } else {
        $('.magnubbin-preexisting').className = 'magnubbin-preexisting active';
        $('.magnubbin-icon-info').className = 'magnubbin-icon-info active';
      }
      this.initPresets();
      this.initGrid9();
    }

    Main.prototype.initTasks = function() {
      this.ookonsole.addTask('add', {
        summary: "Add a new magnubbin to the scene",
        completions: ['add ocrex', 'add slyce', 'add betr'],
        details: "add\n---\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var color, colorLut, index, oo3d;
          oo3d = context.oo3d;
          colorLut = {
            flatr: 'blue',
            betr: 'green',
            ocrex: 'red',
            icos: 'blue',
            decr: 'blue',
            sqish: 'red',
            slys: 'blue',
            spyk: 'any'
          };
          if (!colorLut[options[0]]) {
            return "Buffer.Position '" + options[0] + "' not recognised";
          }
          if ('any' === colorLut[options[0]]) {
            color = ['red', 'green', 'blue'][Math.floor(Math.random() * 3)];
          } else {
            color = colorLut[options[0]];
          }
          index = oo3d.add('Item.Mesh', {
            positionI: context[options[0] + 'PositionI'],
            colorI: context[color + 'ColorI']
          });
          oo3d.edit(index, {
            sX: 0.25,
            sY: 0.25,
            sZ: 0.25
          });
          oo3d._all[context.rendererI].meshes.push(oo3d._all[index]);
          context.changeFocus(index);
          oo3d.render();
          return "Added " + options[0] + ". Focused on index " + index;
        }
      });
      this.ookonsole.addTask('delete', {
        summary: "Remove the focused Item.Mesh from the scene",
        completions: ['delete'],
        details: "delete\n-----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          if (context.focusI) {
            context.oo3d["delete"](context.focusI);
            context.oo3d.render();
            context.focusI = void 0;
            return "Deleted index '" + context.focusI + "'";
          } else {
            return "Cannot delete the camera";
          }
        }
      });
      this.ookonsole.addTask('focus', {
        summary: "Focus on one of the magnubbins",
        completions: ['focus '],
        details: "focus\n-----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var index, ref;
          index = options[0];
          if (!/^\d+$/.test(index)) {
            return "'" + index + "' is not a valid index - must be an integer";
          } else if ('Item.Mesh' !== ((ref = context.oo3d._all[+index]) != null ? ref.C : void 0)) {
            return "'" + index + "' is not the index of an Item.Mesh";
          } else {
            context.changeFocus(+index);
            context.oo3d.render();
            return "Focused on index '" + index + "'";
          }
        }
      });
      this.ookonsole.addTask('blur', {
        summary: "Focus on the camera",
        completions: ['blur'],
        details: "blur\n-----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          context.changeFocus();
          context.oo3d.render();
          return "Focused on the camera";
        }
      });
      this.ookonsole.addTask('edit', {
        summary: "Edit the focused Item.Mesh, or the camera",
        completions: ['edit '],
        details: "edit\n----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var delta, i, l, option, set, value;
          set = {};
          delta = {};
          i = 0;
          l = options.length;
          while (i < l) {
            option = options[i++];
            value = +options[i++];
            if (!/^d?[rst][xyz]$/.test(option)) {
              return "`options[" + (i - 2) + "]` is invalid, use 'dtx', 'sz', etc";
            }
            if (isNaN(value)) {
              return "`options[" + (i - 1) + "]` is invalid, must be numeric";
            }
            if ('d' !== option.charAt(0)) {
              set[option[0] + option[1].toUpperCase()] = value;
            } else {
              delta[option[1] + option[2].toUpperCase()] = value;
            }
          }
          if (context.focusI) {
            context.oo3d.edit(context.focusI, set, delta);
            context.oo3d.render();
            return "Edited index '" + context.focusI + "'";
          } else {
            context.oo3d.edit(context.cameraI, set, delta);
            context.oo3d._all[context.cameraI].updateCamera();
            context.oo3d.render();
            return "Edited the camera";
          }
        }
      });
      this.ookonsole.addTask('reset', {
        summary: "Reset the focused Item.Mesh, or the camera",
        completions: ['reset'],
        details: "reset\n-----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          if (context.focusI) {
            context.oo3d.edit(context.focusI, 'r 0 0 0 s 0.25 0.25 0.25 t 0 0 0');
            context.oo3d.render();
            return "Reset index '" + context.focusI + "'";
          } else {
            context.oo3d.edit(context.cameraI, 'reset');
            context.oo3d._all[context.cameraI].updateCamera();
            context.oo3d.render();
            return "Reset the camera";
          }
        }
      });
      this.ookonsole.addTask('save', {
        summary: "Convert the scene into an Nwang string",
        completions: ['save ', 'save prefix '],
        details: "save\n-----\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var instance, j, len, out, pos, ref;
          out = '';
          out += context.oo3d.read(context.cameraI, 'nwang').slice(-9) + ';';
          ref = context.oo3d._all;
          for (j = 0, len = ref.length; j < len; j++) {
            instance = ref[j];
            if ('Item.Mesh' === (instance != null ? instance.C : void 0)) {
              out += context.oo3d.read(instance.index, 'nwang').slice(-11) + ';';
            }
          }
          out = out.slice(0, -1);
          pos = options.indexOf('prefix');
          if (-1 !== pos) {
            if (!options[pos + 1]) {
              return "The 'prefix' option must be followed by text";
            } else {
              out = options[pos + 1] + out;
            }
          }
          if (-1 !== options.indexOf('prompt')) {
            prompt('Save:', out);
          }
          return "Save: " + out;
        }
      });
      return this.ookonsole.addTask('restore', {
        summary: "Replace the current scene with an Nwang-defined scene",
        completions: ['restore '],
        details: "restore\n-------\n@todo describe. \n\n@todo usage\n",
        runner: function(context, options) {
          var camera, index, item, items, j, len, oo3d;
          if (!options[0]) {
            return "no restore-string provided";
          }
          oo3d = context.oo3d;
          items = options[0].split(';');
          camera = items.shift();
          oo3d.edit(context.cameraI, camera);
          oo3d._all[context.cameraI].updateCamera();
          for (j = 0, len = items.length; j < len; j++) {
            item = items[j];
            index = oo3d.add('Item.Mesh');
            oo3d.edit(index, item);
            oo3d._all[context.rendererI].meshes.push(oo3d._all[index]);
          }
          oo3d.render();
          return "Restored " + items.length + " mesh" + (1 === items.length ? '' : 'es');
        }
      });
    };

    Main.prototype.initPresets = function() {
      var $preset, j, len, ref, results;
      return;
      this.$$presets = $$('.magnubbin-presets >li');
      ref = this.$$presets;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        $preset = ref[j];
        $preset.removeEventListener('click', onPresetClick);
        results.push($preset.addEventListener('click', onPresetClick));
      }
      return results;
    };

    Main.prototype.initGrid9 = function() {
      var deltaCalc, fn1, fn2, fn3, id, main, meshName, meshNames, meshdeltaCalcs, scenedeltaCalcs;
      $('.magnubbin-view').addEventListener('mousedown', (function(_this) {
        return function(event) {
          var $control, $icon, $preexisting, color, displayFocus, displayProgram, displayUMatCameraLoc, h, hRatio, meshI, pickerProgram, pickerUMatCameraLoc, renderer, w, wRatio, wh, x, y;
          wh = vpSize();
          w = wh[0];
          h = wh[1];
          wRatio = _this.$main.width / w;
          hRatio = _this.$main.height / h;
          x = Math.round(wRatio * event.clientX);
          y = Math.round(hRatio * event.clientY);
          renderer = _this.oo3d._all[_this.rendererI];
          displayProgram = renderer.program;
          displayUMatCameraLoc = renderer.uMatCameraLoc;
          pickerProgram = _this.oo3d._all[_this.flatItemProgramI];
          pickerUMatCameraLoc = _this.oo3d.gl.getUniformLocation(pickerProgram.program, 'uMatCamera');
          renderer.program = pickerProgram;
          renderer.uMatCameraLoc = pickerUMatCameraLoc;
          displayFocus = _this.focusI;
          _this.changeFocus(null);
          _this.oo3d.render();
          color = _this.oo3d.getColorAt(x, _this.$main.height - y);
          meshI = _this.oo3d.getMeshIByColor(color);
          renderer.program = displayProgram;
          renderer.uMatCameraLoc = displayUMatCameraLoc;
          _this.changeFocus(displayFocus);
          _this.oo3d.render();
          if (16777215 === meshI) {
            _this.ookonsole.execute('blur');
          } else {
            _this.ookonsole.execute('focus ' + meshI);
          }
          $preexisting = $('.magnubbin-preexisting');
          $icon = $('.magnubbin-icon-info');
          $control = $('.magnubbin-control');
          $icon = $('.magnubbin-icon-control');
          $preexisting.className = 'magnubbin-preexisting';
          $icon.className = 'magnubbin-icon-info';
          $control.className = 'magnubbin-control';
          return $icon.className = 'magnubbin-icon-control';
        };
      })(this));
      $('#grid9-scene-add').addEventListener('mousedown', function(event) {
        return grid9OnlyShow($('#grid9-add'));
      });
      $('#grid9-scene-save').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return _this.ookonsole.execute("save prompt prefix " + location.protocol + "//" + (location.host + location.pathname) + "?scene_v1=");
        };
      })(this));
      $('#grid9-scene-reset').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return _this.ookonsole.execute('reset');
        };
      })(this));
      scenedeltaCalcs = {
        'grid9-scene-txy': txyDelta,
        'grid9-scene-txz': txzDelta,
        'grid9-scene-rxy': rxyDelta,
        'grid9-scene-ryz': ryzDelta,
        'grid9-scene-scale': scaleDelta
      };
      fn1 = function(id, deltaCalc) {
        $('#' + id).addEventListener('mousedown', function(event) {
          return onMousedown(event, $('#grid9-scene'), deltaCalc);
        });
        return $('#' + id).addEventListener('touchstart', function(event) {
          return onTouchstart(event, $('#grid9-scene'), deltaCalc);
        });
      };
      for (id in scenedeltaCalcs) {
        deltaCalc = scenedeltaCalcs[id];
        fn1(id, deltaCalc);
        void 0;
      }
      $('#grid9-add-back').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return grid9OnlyShow($('#grid9-mesh'));
        };
      })(this));
      meshNames = {
        'grid9-add-shape-0': 'flatr',
        'grid9-add-shape-1': 'betr',
        'grid9-add-shape-2': 'ocrex',
        'grid9-add-shape-3': 'icos',
        'grid9-add-shape-4': 'decr',
        'grid9-add-shape-5': 'sqish',
        'grid9-add-shape-6': 'slys',
        'grid9-add-shape-7': 'spyk'
      };
      fn2 = function(id, meshName) {
        return $('#' + id).addEventListener('mousedown', function(event) {
          return main.ookonsole.execute('add ' + meshName);
        });
      };
      for (id in meshNames) {
        meshName = meshNames[id];
        main = this;
        fn2(id, meshName);
        void 0;
      }
      $('#grid9-mesh-delete').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return _this.ookonsole.execute('delete');
        };
      })(this));
      $('#grid9-mesh-flip').addEventListener('mousedown', function(event) {
        return grid9OnlyShow($('#grid9-flip'));
      });
      $('#grid9-mesh-reset').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return _this.ookonsole.execute('reset');
        };
      })(this));
      meshdeltaCalcs = {
        'grid9-mesh-txy': txyDelta,
        'grid9-mesh-txz': txzDelta,
        'grid9-mesh-rxy': rxyDelta,
        'grid9-mesh-ryz': ryzDelta,
        'grid9-mesh-scale': scaleDelta
      };
      fn3 = function(id, deltaCalc) {
        $('#' + id).addEventListener('mousedown', function(event) {
          return onMousedown(event, $('#grid9-mesh'), deltaCalc);
        });
        return $('#' + id).addEventListener('touchstart', function(event) {
          return onTouchstart(event, $('#grid9-mesh'), deltaCalc);
        });
      };
      for (id in meshdeltaCalcs) {
        deltaCalc = meshdeltaCalcs[id];
        fn3(id, deltaCalc);
        void 0;
      }
      $('#grid9-flip-back').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return grid9OnlyShow($('#grid9-mesh'));
        };
      })(this));
      $('#grid9-flip-x').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return _this.ookonsole.execute('edit dsx -1');
        };
      })(this));
      $('#grid9-flip-y').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return _this.ookonsole.execute('edit dsy -1');
        };
      })(this));
      return $('#grid9-flip-z').addEventListener('mousedown', (function(_this) {
        return function(event) {
          return _this.ookonsole.execute('edit dsz -1');
        };
      })(this));
    };

    Main.prototype.changeFocus = function(focusI) {
      var $grid9Mesh, instance, j, len, len1, m, ref, ref1;
      this.focusI = focusI;
      if (ªN === typeof focusI) {
        ref = this.oo3d._all;
        for (j = 0, len = ref.length; j < len; j++) {
          instance = ref[j];
          if (!instance) {
            continue;
          }
          if ('Item.Mesh' === instance.C) {
            instance.sBlend = this.oo3d.gl.SRC_ALPHA_SATURATE;
            instance.dBlend = this.oo3d.gl.ONE_MINUS_DST_COLOR;
          }
        }
        this.oo3d._all[focusI].sBlend = null;
        this.oo3d._all[focusI].dBlend = null;
        return grid9OnlyShow($('#grid9-mesh'));
      } else {
        ref1 = this.oo3d._all;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          instance = ref1[m];
          if (!instance) {
            continue;
          }
          if ('Item.Mesh' === instance.C) {
            instance.sBlend = null;
            instance.dBlend = null;
          }
        }
        $grid9Mesh = $('#grid9-scene');
        if ('grid9 active' === $grid9Mesh.getAttribute('class')) {
          return grid9OnlyShow();
        } else {
          return grid9OnlyShow($grid9Mesh);
        }
      }
    };

    Main.prototype.updateMeshInfo = function() {
      return 1;
    };

    return Main;

  })();

  injectCSS = function($cssTarget, title) {
    return $cssTarget.innerHTML = "/* `@import` must go first */\n@import url(http://fonts.googleapis.com/css?family=Podkova);\n\n" + $cssTarget.innerHTML + "\n\n/* " + title + " */\n\n\n/* LAYOUT */\nhtml, body {\n  overflow: hidden;\n}\nbody {\n  background-image: url(build/asset/cardboard-tile.png); }\n}\na img:active {\n  outline: none;\n}\n\n\n/* MAIN SECTIONS */\n.magnubbin-main {\n  color: #9fc;\n}\n.magnubbin-main >* {\n  position: absolute;\n  box-sizing: border-box;\n  top:    0;\n  bottom: 0;\n  padding: 1rem;\n}\n.magnubbin-view {\n  left:   0;\n  right:  0;\n  padding: 0;\n  background: transparent; /* was rgba(30,50,40,0.7) */\n}\n\n\n/* MIN/MAX BUTTONS */\n.magnubbin-panel-minmax {\n  left:    0;\n  right:   0;\n  padding: 0;\n  height:  1px;\n  z-index: 20;\n}\n.magnubbin-panel-minmax >a {\n  display:    block;\n  position:   relative;\n  margin:     0.6rem 1rem;\n  padding:    0;\n  width:      1em;\n  height:     1em;\n  max-width:  1em;\n  max-height: 1em;\n  border: 2px solid; /* same as text color */\n  border-radius: 2em;\n  font: bold italic 2em serif;\n}\n.magnubbin-icon-info:before {\n  display: inline-block;\n  position: absolute;\n  margin-left: 0.35em;\n  content: \"i\";\n}\n.magnubbin-icon-info.active:before {\n  content: \"×\";\n  font-style: normal;\n  margin: -0.1em 0 0 0.22em;\n}\n.magnubbin-icon-control:before {\n  display: inline-block;\n  position: absolute;\n  margin: -0.1em 0 0 0.25em;\n  content: \"§\";\n}\n.magnubbin-icon-control.active:before {\n  content: \"×\";\n  font-style: normal;\n  margin: -0.1em 0 0 0.22em;\n}\n.magnubbin-toggle-preexisting {\n  float: left;\n}\n.magnubbin-toggle-command {\n  float: right;\n}\n\n.magnubbin-logo {\n  display: none; /*@todo perhaps show this again */\n  font: bold 1.5em Podkova;\n}\n.magnubbin-control .magnubbin-logo {\n  float: right;\n}\n\n\n/* XX */\n.magnubbin-main a {\n  color: #c69;\n  text-decoration: none;\n  transition: all 0.5s;\n}\n.magnubbin-main a:hover {\n  color: #f6d;\n}\n\n.magnubbin-control {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding:    0;\n  right:      0;\n  width:      0;\n  min-width:  0;\n  max-width:  0;\n  height:   100%;\n  background: rgba(0,0,0,0.9);\n  opacity:    0;\n  transition: all 0.3s;\n}\n.magnubbin-control.active {\n  padding:    1rem;\n  width:     25%;\n  min-width: 35rem; /* usual maximum ookonsole-display lines */\n  max-width: 35rem; /* usual maximum ookonsole-display lines */\n  opacity:    1;\n}\n.magnubbin-control >* {\n  flex-basis: 0%; /* log is '100%', so expands to fill */\n}\n.magnubbin-control h2 {\n  margin: 0;\n  padding: 0.3em 0;\n}\n.magnubbin-control h2 tt {\n  color: #eee;\n  font: bold 1em monaco, monospace;\n}\n.magnubbin-control ul,\n.magnubbin-control pre {\n  margin-top: 0.5em;\n}\n\n\n/* 3D CONTEXT */\n#oo3d-main {\n  position: absolute;\n  top:     0;\n  left:    0;\n  width:   100%;\n  height:  100%;\n  z-index: -1;\n}\n\n\n/* INFO PANEL */\n.magnubbin-preexisting {\n  left:      -101%;\n  width:      100%;\n  background: rgba(0,0,0,0.9) url(build/asset/magnubbin-info-bkgnd.jpg) center center;\n  background-size: cover;\n  text-align: center;\n  color:        #fff;\n  opacity:      0;\n  transition:   all 0.3s;\n}\n.magnubbin-preexisting.active {\n  left:    0;\n  opacity: 1;\n}\n.magnubbin-preexisting h1 {\n  display: none;\n  margin-top: 2.5rem;\n}\na[title=\"Visit the Loop.Coop homepage\"] {\n  display: block;\n  margin-top: 8rem;\n}\na[title=\"Refresh Magnubbin\"] {\n  display: block;\n}\n.magnubbin-preexisting h4 {\n  font-size: 1.5em;\n}\n.magnubbin-preexisting h5 strong {\n  display: inline-block;\n  padding: 0.5em 1em 0.4em 1em;\n  font-size: 2em;\n  background-color: rgba(60,0,15,0.9);\n  border: 2px solid;\n  border-radius: 0.2em;\n  cursor: pointer;\n  transition: all 0.5s;\n}\n.magnubbin-preexisting h5 strong:hover {\n  background-color: rgba(120,0,30,0.9);\n}\n.magnubbin-preexisting ol {\n  display: inline-block;\n  padding: 1rem 1rem 1rem 3rem;\n  text-align: left; \n  line-height: 1.3;\n  background-color: rgba(0,0,0,0.7);\n  border: 2px solid;\n  border-radius: 0.2em;\n}\na[title=\"GitHub\"] {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0.5rem;\n}\n@media only screen and (max-width: 830px) {\n  a[title=\"Visit the Loop.Coop homepage\"] {\n    margin-top: 5rem;\n  }\n  a[title=\"Visit the Loop.Coop homepage\"] img {\n    width: 38%;\n    height: auto;\n  }\n  a[title=\"Refresh Magnubbin\"] img {\n    width: 80%;\n    height: auto;\n  }\n  .magnubbin-preexisting ol {\n    padding: 0.6rem 0.6rem 0.6rem 2rem;\n    font-size: 0.8em;\n  }\n}\n@media only screen and (max-height: 850px) {\n  a[title=\"Visit the Loop.Coop homepage\"] {\n    margin-top: 5rem;\n  }\n  .magnubbin-preexisting ol {\n    padding: 0.6rem 0.6rem 0.6rem 2rem;\n    font-size: 0.8em;\n  }\n}\n@media only screen and (max-height: 800px) {\n  a[title=\"Visit the Loop.Coop homepage\"] {\n    margin-top: 2rem;\n  }\n}\n@media only screen and (max-height: 680px) {\n  .magnubbin-preexisting ol {\n    display: none;\n  }\n}\n@media only screen and (max-height: 450px) {\n  a[title=\"GitHub\"] {\n    display: none;\n  }\n}\n\n\n/* PRESETS */\n/*@todo perhaps reinstate presets in a later version? */\n/*\nul.magnubbin-presets {\n  clear: both;\n  margin: 0 0 0.2em 0;\n  padding: 0;\n}\n.magnubbin-presets >li {\n  display: inline-block;\n  padding: 0.5em 0.8em;\n  margin: 0 0.2em 0.5em 0;\n  list-style-type: none;\n  border: 2px solid;\n  border-radius: 0.2em;\n  color: #9fc;\n  cursor: pointer;\n  transition: all 0.5s;\n}\n.magnubbin-presets >li:hover {\n  color: #0f3;\n}\n*/\n\n\n/* DISPLAY AND COMMAND */\n.magnubbin-control #ookonsole-display {\n  flex-basis: 100%; /* override 1px */\n  margin: 0;\n  padding: 0;\n  border-width: 0;\n  border-radius: 0.4em 0.4em 0 0;\n  font: 0.75rem \"monaco\", monospace;\n}\n.magnubbin-control.active #ookonsole-display {\n  padding: 0.75em 0.8em;\n  border: 2px solid;\n}\n#ookonsole-command {\n  display: block;\n  box-sizing: border-box;\n  width: 100%;\n  padding: 0;\n  border-width: 0;\n  border-radius: 0 0 0.4em 0.4em;\n  font: 1em \"monaco\", monospace;\n  color: #eee;\n  background: transparent;\n}\n.magnubbin-control.active #ookonsole-command {\n  padding: 0.5em;\n  border: 2px solid #9fc;\n}\n\n\n/* ERROR */\n#magnubbin-error {\n  position: absolute;\n  box-sizing: border-box;\n  bottom:  0;\n  left:    5%;\n  width:  90%;\n  padding: 1rem;\n  font-family: monaco, monospace;\n  background-color: #933;\n  color: #fff;\n  transition: all 0.5s;\n  opacity: 1;\n}\n#magnubbin-error.hidden {\n  padding-bottom: 0;\n  opacity: 0;\n}\n\n/* GRID9 */\n.magnubbin-grid9 {\n  opacity: 1;\n  transition: all 0.3s;\n}\n.magnubbin-grid9.active {\n  opacity: 0.4;\n}\n.grid9 {\n  position:    fixed;\n  display:     block;\n  padding:     0;\n  width:       0;\n  height:      0;\n  left:        50%;\n  margin-left: -145px;\n  top:         50%;\n  margin-top:  -125px;\n  opacity:     0;  /* '1' when active */\n  z-index:     -5; /* '10' when active */\n  transition: opacity 0.4s, z-index 0.1s 0.5s;\n}\n.grid9.active {\n  z-index: 10;\n  opacity: 1;\n  transition: opacity 0.4s;\n}\n.grid9 >li {\n  position:    absolute;\n  width:       90px;\n  height:      90px;\n  list-style:  none;\n  text-align:  center;\n  background:  rgba(0,0,0,0.85);\n  cursor: default;\n  transition:  all 0.4s;\n}\n.grid9 >li:hover {\n  color:       #fff;\n  background:  rgba(0,0,0,0.95);\n}\n.grid9.active >li { /* eg during transition */\n  cursor: pointer;\n}\n.grid9 >li >b,\n.grid9 >li >i {\n  display: block;\n  -webkit-touch-callout: none; /* Android and iOS callouts*/\n    -webkit-user-select: none; /* Chrome, Safari, Opera */\n     -khtml-user-select: none; /* Konqueror */\n       -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* IE */\n            user-select: none;\n}\n.grid9 >li >b {\n  padding: 10px 0;\n}\n.grid9 >li >i {\n  font: bold 1.25em/1 monaco, monospace;\n}\n.grid9-left {\n  \n}\n.grid9-center {\n  margin-left: 100px;\n}\n.grid9-right {\n  margin-left: 200px;\n}\n.grid9-top {\n  \n}\n.grid9-middle {\n  margin-top: 100px;\n}\n.grid9-bottom {\n  margin-top: 200px;\n}\n\n.grid9 i {\n  font-style: normal;\n}\n\n#grid9-add-shape-0 {\n  background-image: url(build/asset/add-icon-flatr.png); }\n#grid9-add-shape-1 {\n  background-image: url(build/asset/add-icon-betr.png); }\n#grid9-add-shape-2 {\n  background-image: url(build/asset/add-icon-ocrex.png); }\n#grid9-add-shape-3 {\n  background-image: url(build/asset/add-icon-icos.png); }\n#grid9-add-shape-4 {\n  background-image: url(build/asset/add-icon-decr.png); }\n#grid9-add-shape-5 {\n  background-image: url(build/asset/add-icon-sqish.png); }\n#grid9-add-shape-6 {\n  background-image: url(build/asset/add-icon-slys.png); }\n#grid9-add-shape-7 {\n  background-image: url(build/asset/add-icon-spyk.png); }\n\n";
  };

  injectHTML = function($htmlTarget, title) {
    $htmlTarget.className += ' magnubbin-wrap';
    $htmlTarget.innerHTML = "\n\n\n<!-- " + title + " -->\n\n<!-- The main Magnubbin elements -->\n<main class=\"magnubbin-main\">\n  <section class=\"magnubbin-view\">\n    <canvas id=\"oo3d-main\" width=\"600\" height=\"450\"></canvas><!-- @todo resize with window -->\n    <!--<a href=\"http://loop.coop/\" title=\"Created by Loop.Coop\" class=\"magnubbin-logo\">Loop.Coop</a>-->\n    <div id=\"magnubbin-error\" class=\"hidden\"></div>\n  </section>\n\n  <section class=\"magnubbin-grid9\">\n\n    <!-- The Scene Grid9 appears when the background is clicked -->\n    <ul id=\"grid9-scene\" class=\"grid9\">\n      <li id=\"grid9-scene-add\"    class=\"grid9-left   grid9-top\"   ><b>Add</b   ><i>+</i></li>\n      <li id=\"grid9-scene-save\"   class=\"grid9-right  grid9-top\"   ><b>Save</b  ><i>[]</i></li>\n      <li id=\"grid9-scene-txy\"    class=\"grid9-left   grid9-middle\"><b>Move</b  ><i>x y</i></li>\n      <li id=\"grid9-scene-scale\"  class=\"grid9-center grid9-middle\"><b>Zoom</b  ><i></i></li>\n      <li id=\"grid9-scene-txz\"    class=\"grid9-right  grid9-middle\"><b>Move</b  ><i>x z</i></li>\n      <li id=\"grid9-scene-rxy\"    class=\"grid9-left   grid9-bottom\"><b>Rotate</b><i>x y</i></li>\n      <li id=\"grid9-scene-reset\"  class=\"grid9-center grid9-bottom\"><b>Reset</b ><i>/</i></li>\n      <li id=\"grid9-scene-ryz\"    class=\"grid9-right  grid9-bottom\"><b>Rotate</b><i>y z</i></li>\n    </ul>\n\n    <!-- The Add Grid9 appears when the 'Add' button is clicked -->\n    <ul id=\"grid9-add\" class=\"grid9\">\n      <li id=\"grid9-add-back\"    class=\"grid9-left   grid9-top\"   ><b>Back</b><i>&lt;</i></li>\n      <li id=\"grid9-add-shape-0\" class=\"grid9-center grid9-top\"   ><b>Add</b><i></i></li>\n      <li id=\"grid9-add-shape-1\" class=\"grid9-right  grid9-top\"   ><b>Add</b><i></i></li>\n      <li id=\"grid9-add-shape-2\" class=\"grid9-left   grid9-middle\"><b>Add</b><i></i></li>\n      <li id=\"grid9-add-shape-3\" class=\"grid9-center grid9-middle\"><b>Add</b><i></i></li>\n      <li id=\"grid9-add-shape-4\" class=\"grid9-right  grid9-middle\"><b>Add</b><i></i></li>\n      <li id=\"grid9-add-shape-5\" class=\"grid9-left   grid9-bottom\"><b>Add</b><i></i></li>\n      <li id=\"grid9-add-shape-6\" class=\"grid9-center grid9-bottom\"><b>Add</b><i></i></li>\n      <li id=\"grid9-add-shape-7\" class=\"grid9-right  grid9-bottom\"><b>Add</b><i></i></li>\n    </ul>\n\n    <!-- The Mesh Grid9 appears when a mesh in the 3D scene is clicked -->\n    <ul id=\"grid9-mesh\" class=\"grid9\">\n      <li id=\"grid9-mesh-delete\" class=\"grid9-left   grid9-top   \"><b>Delete</b><i>&times;</i></li>\n      <li id=\"grid9-mesh-flip\"   class=\"grid9-right  grid9-top   \"><b>Flip</b  ><i>...</i></li>\n      <li id=\"grid9-mesh-txy\"    class=\"grid9-left   grid9-middle\"><b>Move</b  ><i>x y</i></li>\n      <li id=\"grid9-mesh-scale\"  class=\"grid9-center grid9-middle\"><b>Scale</b ><i></i></li>\n      <li id=\"grid9-mesh-txz\"    class=\"grid9-right  grid9-middle\"><b>Move</b  ><i>x z</i></li>\n      <li id=\"grid9-mesh-rxy\"    class=\"grid9-left   grid9-bottom\"><b>Rotate</b><i>x y</i></li>\n      <li id=\"grid9-mesh-reset\"  class=\"grid9-center grid9-bottom\"><b>Reset</b ><i>/</i></li>\n      <li id=\"grid9-mesh-ryz\"    class=\"grid9-right  grid9-bottom\"><b>Rotate</b><i>y z</i></li>\n    </ul>\n\n    <!-- The Flip Grid9 appears when the 'Flip' button is clicked -->\n    <ul id=\"grid9-flip\" class=\"grid9\">\n      <li id=\"grid9-flip-back\"  class=\"grid9-left   grid9-top\"   ><b>Back</b ><i>&lt;</i></li>\n      <li id=\"grid9-flip-x\"     class=\"grid9-left   grid9-middle\"><b>Flip</b><i>x</i></li>\n      <li id=\"grid9-flip-y\"     class=\"grid9-center grid9-middle\"><b>Flip</b><i>y</i></li>\n      <li id=\"grid9-flip-z\"     class=\"grid9-right  grid9-middle\"><b>Flip</b><i>z</i></li>\n    </ul>\n\n  </section>\n\n  <section class=\"magnubbin-panel-minmax\">\n    <a href=\"#/\" title=\"Toggle info\" class=\"magnubbin-toggle-preexisting\">\n      <span class=\"magnubbin-icon-info\"></span>\n    </a>\n    <a href=\"#/\" title=\"Toggle command\" class=\"magnubbin-toggle-command\">\n      <span class=\"magnubbin-icon-control\"></span>\n    </a>\n  </section>\n\n  <section class=\"magnubbin-control\">\n    <!--@todo perhaps reinstate presets in a later version? -->\n    <!--\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"clear\">Clear</li>\n      <li data-command=\"add flatr\">Add Flatr</li>\n      <li data-command=\"add betr\" >Add Betr</li>\n      <li data-command=\"add ocrex\">Add Ocrex</li>\n      <li data-command=\"add icos\" >Add Icos</li>\n      <li data-command=\"add decr\" >Add Decr</li>\n      <li data-command=\"add sqish\">Add Sqish</li>\n      <li data-command=\"add slys\" >Add Slys</li>\n      <li data-command=\"add spyk\" >Add Spyk</li>\n    </ul>\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"edit drx -20\">rx-</li>\n      <li data-command=\"edit drx 20\" >rx+</li>\n      <li data-command=\"edit dry -20\">ry-</li>\n      <li data-command=\"edit dry 20\" >ry+</li>\n      <li data-command=\"edit drz -20\">rz-</li>\n      <li data-command=\"edit drz 20\" >rz+</li>\n    </ul>\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"edit dsx 2.0 dsy 2.0 dsz 2.0\">&times;2</li>\n      <li data-command=\"edit dsx 0.5 dsy 0.5 dsz 0.5\" >&divide2</li>\n      <li data-command=\"edit dsx -1\">fx</li>\n      <li data-command=\"edit dsy -1\">fy</li>\n      <li data-command=\"edit dsz -1\">fz</li>\n    </ul>\n    <ul class=\"magnubbin-presets\">\n      <li data-command=\"edit dtx -0.2\">x-</li>\n      <li data-command=\"edit dtx 0.2\" >x+</li>\n      <li data-command=\"edit dty -0.2\">y-</li>\n      <li data-command=\"edit dty 0.2\" >y+</li>\n      <li data-command=\"edit dtz -0.2\">z-</li>\n      <li data-command=\"edit dtz 0.2\" >z+</li>\n    </ul>\n    <ul class=\"magnubbin-presets magnubbin-focus-presets\">\n      <li data-command=\"blur\">Focus Camera</li>\n    </ul>\n    -->\n    <h2>Type <tt>help</tt> to list commands:</h2>\n    <pre id=\"ookonsole-display\"></pre>\n    <div><input id=\"ookonsole-command\"></div>\n  </section>\n  <section class=\"magnubbin-preexisting\">\n    " + $htmlTarget.innerHTML + "\n  </section>\n</main>\n";
    $('.magnubbin-toggle-preexisting').addEventListener('click', function() {
      var $icon, $preexisting;
      $preexisting = $('.magnubbin-preexisting');
      $icon = $('.magnubbin-icon-info');
      if (/active/.test($preexisting.className)) {
        $preexisting.className = 'magnubbin-preexisting';
        return $icon.className = 'magnubbin-icon-info';
      } else {
        $preexisting.className = 'magnubbin-preexisting active';
        $icon.className = 'magnubbin-icon-info active';
        $('.magnubbin-control').className = 'magnubbin-control';
        $('.magnubbin-icon-control').className = 'magnubbin-icon-control';
        return grid9OnlyShow();
      }
    });
    $('.magnubbin-toggle-command').addEventListener('click', function() {
      var $control, $icon;
      $control = $('.magnubbin-control');
      $icon = $('.magnubbin-icon-control');
      if (/active/.test($control.className)) {
        $control.className = 'magnubbin-control';
        return $icon.className = 'magnubbin-icon-control';
      } else {
        $control.className = 'magnubbin-control active';
        $icon.className = 'magnubbin-icon-control active';
        $('.magnubbin-preexisting').className = 'magnubbin-preexisting';
        $('.magnubbin-icon-info').className = 'magnubbin-icon-info';
        grid9OnlyShow();
        return $('#ookonsole-command').focus();
      }
    });
    return $('.magnubbin-preexisting h5 strong').addEventListener('click', function() {
      $('.magnubbin-preexisting').className = 'magnubbin-preexisting';
      $('.magnubbin-icon-info').className = 'magnubbin-icon-info';
      return grid9OnlyShow();
    });
  };

  onPresetClick = function(event) {
    var error;
    try {
      return window.magnubbin.ookonsole.execute(event.target.getAttribute('data-command'));
    } catch (_error) {
      error = _error;
      $('#magnubbin-error').innerHTML = error;
      return $('#magnubbin-error').className = '';
    }
  };

  vpSize = function(event) {
    var b, d, e, h, w;
    d = document;
    e = d.documentElement;
    b = d.getElementsByTagName('body')[0];
    w = window.innerWidth || e.clientWidth || b.clientWidth;
    h = window.innerHeight || e.clientHeight || b.clientHeight;
    return [w, h];
  };

  grid9OnlyShow = function($el) {
    var $grid9, j, len, ref;
    ref = $$('.grid9');
    for (j = 0, len = ref.length; j < len; j++) {
      $grid9 = ref[j];
      $grid9.setAttribute('class', 'grid9');
    }
    if ($el) {
      return $el.setAttribute('class', 'grid9 active');
    }
  };

  grid9IsActive = function(id) {
    return 'gui active' === $('#' + id).getAttribute('class');
  };

  onMousedown = function(event, $el, deltaCalc) {
    var main;
    event.preventDefault();
    main = window.magnubbin;
    main.deltaCalc = deltaCalc;
    main.downPos = [event.clientX, event.clientY];
    main.snapshot = main.oo3d.read(main.focusI || main.cameraI);
    main.delta = null;
    $('.magnubbin-grid9').className = 'magnubbin-grid9 active';
    window.addEventListener('mousemove', onMousemove);
    return window.addEventListener('mouseup', onMouseup);
  };

  onTouchstart = function(event, $el, deltaCalc) {
    var main, touches;
    event.preventDefault();
    main = window.magnubbin;
    main.deltaCalc = deltaCalc;
    touches = event.changedTouches;
    main.downPos = [touches[0].pageX, touches[0].pageY];
    main.snapshot = main.oo3d.read(main.focusI || main.cameraI);
    main.delta = null;
    $('.magnubbin-grid9').className = 'magnubbin-grid9 active';
    window.addEventListener('touchmove', onTouchmove);
    return window.addEventListener('touchend', onTouchend);
  };

  onMousemove = function(event) {
    var main, oo3d, x, y;
    main = window.magnubbin;
    if (main.downPos) {
      oo3d = main.oo3d;
      x = event.clientX - main.downPos[0];
      y = event.clientY - main.downPos[1];
      main.delta = main.deltaCalc(x, y);
      oo3d.edit(main.focusI || main.cameraI, main.snapshot, main.delta);
      if (!main.focusI) {
        oo3d._all[main.cameraI].updateCamera();
      }
      oo3d.render();
      return main.updateMeshInfo();
    }
  };

  onTouchmove = function(event) {
    var main, oo3d, touches, x, y;
    main = window.magnubbin;
    if (main.downPos) {
      oo3d = main.oo3d;
      touches = event.changedTouches;
      x = touches[0].pageX - main.downPos[0];
      y = touches[0].pageY - main.downPos[1];
      main.delta = main.deltaCalc(x, y);
      oo3d.edit(main.focusI || main.cameraI, main.snapshot, main.delta);
      if (!main.focusI) {
        oo3d._all[main.cameraI].updateCamera();
      }
      oo3d.render();
      return main.updateMeshInfo();
    }
  };

  onMouseup = function(event) {
    window.removeEventListener('mousemove', onMousemove);
    window.removeEventListener('mouseup', onMouseup);
    return afterInteraction();
  };

  onTouchend = function(event) {
    window.removeEventListener('touchmove', onTouchmove);
    window.removeEventListener('touchend', onTouchend);
    return afterInteraction();
  };

  afterInteraction = function() {
    var $display, command, hasScrolledToEnd, j, len, main, option, ref;
    main = window.magnubbin;
    $('.magnubbin-grid9').className = 'magnubbin-grid9';
    if (main.delta) {
      command = '§ edit';
      ref = ['rX', 'rY', 'rZ', 'sX', 'sY', 'sZ', 'tX', 'tY', 'tZ'];
      for (j = 0, len = ref.length; j < len; j++) {
        option = ref[j];
        if (ªN === typeof main.delta[option]) {
          command += ' d' + option.toLowerCase() + ' ' + main.delta[option];
        }
      }
      $display = main.ookonsole.$display;
      hasScrolledToEnd = $display.scrollTop > $display.scrollHeight - $display.offsetHeight;
      $display.innerHTML += command + '\n';
      if (hasScrolledToEnd) {
        $display.scrollTop = $display.scrollHeight;
      }
    }
    main.downPos = null;
    main.deltaCalc = function(x, y) {
      return {};
    };
    main.snapshot = null;
    return main.delta = null;
  };

  txyDelta = function(x, y) {
    return {
      tX: x / 500,
      tY: y / -500
    };
  };

  txzDelta = function(x, y) {
    return {
      tX: x / 500,
      tZ: y / 500
    };
  };

  rxyDelta = function(x, y) {
    return {
      rX: y / 500,
      rY: x / 500
    };
  };

  ryzDelta = function(x, y) {
    return {
      rY: x / 500,
      rZ: y / -500
    };
  };

  scaleDelta = function(x, y) {
    var scale;
    scale = Math.abs(1 + (x - y) / 500);
    return {
      sX: scale,
      sY: scale,
      sZ: scale
    };
  };

  parseQuery = function(query) {
    var decode, match, obj, search;
    search = /([^&=]+)=?([^&]*)/g;
    decode = function(s) {
      return decodeURIComponent(s.replace(/\+/g, ' '));
    };
    obj = {};
    while ((match = search.exec(query))) {
      obj[decode(match[1])] = decode(match[2]);
    }
    return obj;
  };

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªC] = Main;
  }

  if (ªF === typeof define && define.amd) {

  } else if (ªO === typeof module && module && module.exports) {
    Ookonsole = require('ookonsole');
  } else if (this.Ookonsole) {
    Ookonsole = this.Ookonsole;
  } else {
    Ookonsole = window.Ookonsole;
  }

  if ((ªU !== typeof arts) && (ªU !== typeof resolvers) && (ªU !== typeof updaters)) {
    window.magnubbin = new Main({
      $cssTarget: $('style'),
      $htmlTarget: $('article')
    });
  }

  Tudor = (function() {
    Tudor.prototype.I = 'Tudor';

    Tudor.prototype.toString = function() {
      return "[object " + I + "]";
    };

    Tudor.prototype.articles = [];

    function Tudor(opt) {
      this.opt = opt != null ? opt : {};
      this["do"] = bind(this["do"], this);
      switch (this.opt.format) {
        case 'html':
          this.pageHead = function(summary) {
            return "<style>\n  body     { font-family: sans-serif; }\n  a        { outline: 0; }\n  b        { display: inline-block; width: .7em }\n\n  b.pass              { color: #393 }\n  b.fail              { color: #bbb }\n  article.fail b.pass { color: #bbb }\n  section.fail b.pass { color: #bbb }\n\n  pre      { padding: .5em; margin: .2em 0; border-radius: 4px; }\n  pre.fn   { background-color: #fde }\n  pre.pass { background-color: #cfc }\n  pre.fail { background-color: #d8e0e8 }\n\n  article  { margin-bottom: .5rem }\n  article h2 { padding-left:.5rem; margin:0; font-weight:normal }\n  article.pass { border-left: 5px solid #9c9 }\n  article.fail { border-left: 5px solid #9bf }\n  article.fail h2 { margin-bottom: .5rem }\n  article.pass >div { display: none }\n\n  section  { margin-bottom: .5rem }\n  section h3   { padding-left: .5rem; margin: 0; }\n  section.pass { border-left: 3px solid #9c9 }\n  section.fail { border-left: 3px solid #9bf }\n  section.fail h3 { margin-bottom: .5rem }\n  section.pass >div { display: none }\n\n  article.fail section.pass { border-left-color: #ccc }\n\n  div      { padding-left: .5em; }\n  div.fail { border-left: 3px solid #9bf; font-size: .8rem }\n  div h4   { margin: 0 }\n  div h4 { font: normal .8rem/1.2rem monaco, monospace }\n  div.fail, div.fail h4 { margin: .5rem 0 }\n\n</style>\n<h4><a href=\"#end\" id=\"top\">\u2b07</a>  " + summary + "</h4>";
          };
          this.pageFoot = function(summary) {
            return "<h4><a href=\"#top\" id=\"end\">\u2b06</a>  " + summary + "</h4>\n<script>\n  document.title='" + (summary.replace(/<\/?[^>]+>/g, '')) + "';\n</script>";
          };
          this.articleHead = function(heading, fail) {
            return ("<article class=\"" + (fail ? 'fail' : 'pass') + "\">") + ("<h2>" + (fail ? this.cross : this.tick) + heading + "</h2><div>");
          };
          this.articleFoot = '</div></article>';
          this.sectionHead = function(heading, fail) {
            return ("<section class=\"" + (fail ? 'fail' : 'pass') + "\">") + ("<h3>" + (fail ? this.cross : this.tick) + heading + "</h3><div>");
          };
          this.sectionFoot = '</div></section>';
          this.jobFormat = function(heading, result) {
            return ("<div class=\"" + (result ? 'fail' : 'pass') + "\">") + ("<h4>" + (result ? this.cross : this.tick) + heading + "</h4>") + ("" + (result ? this.formatError(result) : '')) + "</div>";
          };
          this.tick = '<b class="pass">\u2713</b> ';
          this.cross = '<b class="fail">\u2718</b> ';
          break;
        default:
          this.pageHead = function(summary) {
            return "" + summary;
          };
          this.pageFoot = function(summary) {
            return "\n" + summary;
          };
          this.articleHead = function(heading, fail) {
            return "\n" + (fail ? this.cross : this.tick) + " " + heading + "\n===" + (new Array(heading.length).join('=')) + "\n";
          };
          this.articleFoot = '';
          this.sectionHead = function(heading, fail) {
            return "\n" + (fail ? this.cross : this.tick) + " " + heading + "\n---" + (new Array(heading.length).join('-')) + "\n";
          };
          this.sectionFoot = '';
          this.jobFormat = function(heading, result) {
            return ((result ? this.cross : this.tick) + " " + heading) + ("" + (result ? '\n' + this.formatError(result) : ''));
          };
          this.jobFoot = '';
          this.tick = '\u2713';
          this.cross = '\u2718';
      }
    }

    Tudor.prototype.add = function(lines) {
      var article, i, line, runner, section;
      article = {
        sections: []
      };
      runner = null;
      section = null;
      if (ªA !== ªtype(lines)) {
        throw new Error("`lines` isn’t an array");
      }
      if (0 === lines.length) {
        throw new Error("`lines` has no elements");
      }
      if (ªS !== ªtype(lines[0])) {
        throw new Error("`lines[0]` isn’t a string");
      }
      article.heading = lines.shift();
      i = 0;
      while (i < lines.length) {
        line = lines[i];
        switch (ªtype(line)) {
          case ªO:
            if (!line.runner) {
              throw new Error("Errant object");
            }
            runner = line.runner;
            break;
          case ªF:
            section.jobs.push(line);
            break;
          case ªS:
            if (this.isAssertion(lines[i + 1], lines[i + 2])) {
              if (!section) {
                throw new Error("Cannot add an assertion here");
              }
              section.jobs.push([runner, line, lines[++i], lines[++i]]);
            } else {
              section = {
                heading: line,
                jobs: []
              };
              article.sections.push(section);
            }
        }
        i++;
      }
      return this.articles.push(article);
    };

    Tudor.prototype["do"] = function() {
      var actual, art, artFail, artPass, article, e, error, expect, heading, j, job, len, len1, len2, m, mock, o, pge, pgeFail, pgePass, ref, ref1, ref2, result, runner, sec, secFail, secPass, section, summary;
      pge = [];
      mock = null;
      pgePass = pgeFail = 0;
      ref = this.articles;
      for (j = 0, len = ref.length; j < len; j++) {
        article = ref[j];
        art = [];
        artPass = artFail = 0;
        ref1 = article.sections;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          section = ref1[m];
          sec = [];
          secPass = secFail = 0;
          ref2 = section.jobs;
          for (o = 0, len2 = ref2.length; o < len2; o++) {
            job = ref2[o];
            switch (ªtype(job)) {
              case ªF:
                try {
                  mock = job.apply(this, mock);
                } catch (_error) {
                  e = _error;
                  error = e.message;
                }
                if (error) {
                  sec.push(this.formatMockModifierError(job, error));
                }
                break;
              case ªA:
                runner = job[0], heading = job[1], expect = job[2], actual = job[3];
                result = runner(expect, actual, mock);
                if (!result) {
                  sec.push(this.jobFormat("" + (this.sanitize(heading))));
                  pgePass++;
                  artPass++;
                  secPass++;
                } else {
                  sec.push(this.jobFormat("" + (this.sanitize(heading)), result));
                  pgeFail++;
                  artFail++;
                  secFail++;
                }
            }
          }
          sec.unshift(this.sectionHead("" + (this.sanitize(section.heading)), secFail));
          sec.push(this.sectionFoot);
          art = art.concat(sec);
        }
        art.unshift(this.articleHead("" + (this.sanitize(article.heading)), artFail));
        art.push(this.articleFoot);
        pge = pge.concat(art);
        summary = pgeFail ? this.cross + " FAILED " + pgeFail + "/" + (pgePass + pgeFail) : this.tick + " Passed " + pgePass + "/" + (pgePass + pgeFail);
      }
      pge.unshift(this.pageHead(summary));
      pge.push(this.pageFoot(summary));
      return pge.join('\n');
    };

    Tudor.prototype.formatError = function(result) {
      switch (result.length + "-" + this.opt.format) {
        case '2-html':
          return result[0] + "\n<pre class=\"fail\">" + (this.sanitize(result[1].message)) + "</pre>";
        case '2-plain':
          return result[0] + "\n" + (this.sanitize(result[1].message));
        case '3-html':
          return "<pre class=\"fail\">" + (this.sanitize(this.reveal(result[0]))) + "</pre>\n..." + result[1] + "...\n<pre class=\"pass\">" + (this.sanitize(this.reveal(result[2]))) + "</pre>";
        case '3-plain':
          return (this.sanitize(this.reveal(result[0]))) + "\n..." + result[1] + "...\n" + (this.sanitize(this.reveal(result[2])));
        case '4-html':
          return "<pre class=\"fail\">" + (this.sanitize(this.reveal(result[0]))) + " (" + (ªtype(result[0])) + ")</pre>\n..." + result[1] + "...\n<pre class=\"pass\">" + (this.sanitize(this.reveal(result[2]))) + " (" + (ªtype(result[2])) + ")</pre>";
        case '4-plain':
          return (this.sanitize(this.reveal(result[0]))) + " (" + (ªtype(result[0])) + ")\n..." + result[1] + "...\n" + (this.sanitize(this.reveal(result[2]))) + " (" + (ªtype(result[2])) + ")";
        default:
          throw new Error("Cannot process '" + result.length + "-" + this.opt.format + "'");
      }
    };

    Tudor.prototype.formatMockModifierError = function(fn, error) {
      switch (this.opt.format) {
        case 'html':
          return "<pre class=\"fn\">" + (this.sanitize(fn + '')) + "</pre>\n...encountered an exception:\n<pre class=\"fail\">" + (this.sanitize(error)) + "</pre>";
        default:
          return (this.sanitize(fn + '')) + "\n...encountered an exception:\n" + (this.sanitize(error));
      }
    };

    Tudor.prototype.reveal = function(value) {
      return value != null ? value.toString().replace(/^\s+|\s+$/g, function(match) {
        return '\u00b7' + (new Array(match.length)).join('\u00b7');
      }) : void 0;
    };

    Tudor.prototype.sanitize = function(value) {
      switch (this.opt.format) {
        case 'html':
          return value != null ? value.toString().replace(/</g, '&lt;') : void 0;
        default:
          return value;
      }
    };

    Tudor.prototype["throw"] = {
      runner: function(expect, actual, mock) {
        var e, error;
        error = false;
        try {
          actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (!error) {
          return [
            'No exception thrown, expected', {
              message: expect
            }
          ];
        } else if (expect !== error.message) {
          return [error.message, 'was thrown, but expected', expect];
        }
      }
    };

    Tudor.prototype.equal = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (expect !== result) {
          if (result + '' === expect + '') {
            return [result, 'was returned, but expected', expect, true];
          } else {
            return [result, 'was returned, but expected', expect];
          }
        }
      }
    };

    Tudor.prototype.is = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (expect !== ªtype(result)) {
          return ["type " + (ªtype(result)), 'was returned, but expected', "type " + expect];
        }
      }
    };

    Tudor.prototype.match = {
      runner: function(expect, actual, mock) {
        var e, error, result;
        error = false;
        try {
          result = actual.apply(this, mock);
        } catch (_error) {
          e = _error;
          error = e;
        }
        if (error) {
          return ['Unexpected exception', error];
        } else if (ªF !== typeof expect.test) {
          return [
            '`test()` is not a function', {
              message: expect
            }
          ];
        } else if (!expect.test('' + result)) {
          return ['' + result, 'failed test', expect];
        }
      }
    };

    Tudor.prototype.isAssertion = function(line1, line2) {
      if (ªF !== ªtype(line2)) {
        return false;
      }
      if ((ªO === ªtype(line1)) && ªF === ªtype(line1.runner)) {
        return false;
      }
      return true;
    };

    return Tudor;

  })();

  tudor = new Tudor({
    format: ªO === typeof window ? 'html' : 'plain'
  });

  Main.runTest = tudor["do"];

  tudor.add([
    "01 Magnubbin Constructor Usage", tudor.is, "The class and instance are expected types", "The class is a function", ªF, function() {
      return Main;
    }
  ]);

}).call(this);
